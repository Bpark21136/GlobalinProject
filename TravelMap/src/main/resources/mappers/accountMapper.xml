<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.web.travel.mapper.AccountMapper">

	<!-- 로그인 확인 sql문 -->
	<select id="loginSelect" parameterType="com.web.travel.dto.accountDTO" resultType="com.web.travel.dto.accountDTO">
		select userid from user where userid=#{userId} and hashed_password=#{hashedPassword}
	</select>
	
	<!-- 회원가입 시 회원 정보 입력 sql문 -->
	<insert id="signUpInsert" parameterType="com.web.travel.dto.accountDTO">
		insert into user (
			userid, 
			email, 
			hashed_password, 
			country
		) 
		values (
			#{userId}, 
			#{email}, 
			#{hashedPassword}, 
			#{country}
		)
	</insert>
	
	<!-- 아이디 중복 검사 sql문 -->
	<select id="duIdSelect" parameterType="com.web.travel.dto.accountDTO" resultType="com.web.travel.dto.accountDTO">
		select userid from user where userid=#{userId}
	</select>
	
	<!-- 이메일 중복 검사 sql문 -->
	<select id="duEmailSelect" parameterType="com.web.travel.dto.accountDTO" resultType="com.web.travel.dto.accountDTO">
		select email from user where email=#{email}
	</select>
	
	<!-- 아이디 찾기 sql문 -->
	<select id="findIdSelect" parameterType="com.web.travel.dto.accountDTO" resultType="String">
		select userid from user where email=#{email}
	</select>
	<!-- 비밀번호 찾기 sql문 -->
	<select id="sendNumberSelect" parameterType="com.web.travel.dto.accountDTO" resultType="com.web.travel.dto.accountDTO">
		select email from user where email=#{email} and userid=#{userId}
	</select>
	<!-- 비밀번호 찾기 sql문에 의해 회원이 인증 된 후 인증번호 저장 sql문 -->
	<insert id="auth_KeyInsert" parameterType="com.web.travel.dto.auth_passwordTO">
		insert into auth_password (
			email,
			auth_Key, 
			generate_Date
		) 
		values (
			#{email}, 
			#{authKey}, 
			#{generateDate}
		)
	</insert>
	<!-- 이메일로 발송하는 인증번호의 중복검사 sql문 -->
	<select id="duplicateAuth_KeySelect" parameterType="com.web.travel.dto.auth_passwordTO" resultType="String">
		select AUTH_KEY from auth_password where AUTH_KEY=#{authKey}
	</select>
	<!-- 인증번호 테이블의 이메일 중복검사 sql문 -->
	<select id="duplicateEmailSelect" parameterType="com.web.travel.dto.auth_passwordTO" resultType="String">
		select email from auth_password where EMAIL=#{email}
	</select>
	<!-- 인증번호 테이블의 이메일이 중복되었을 경우 삭제하는 sql문 -->
	<delete id="duplicateEmailDelete" parameterType="com.web.travel.dto.auth_passwordTO">
		delete from auth_password where EMAIL=#{email}
	</delete>
	<!-- 생성된지 1시간이 지난 인증번호 삭제 sql문 -->
	<delete id="auth_KeyDelete" parameterType="com.web.travel.dto.auth_passwordTO">
		delete from auth_password where generate_date &lt; date_add(now(), interval -1 hour)
	</delete>
	<!-- 인증번호 검사 sql문 -->
	<select id="authKeySelect" parameterType="com.web.travel.dto.auth_passwordTO" resultType="String">
		select email from auth_password where AUTH_KEY=#{authKey}
	</select>
	<!--비밀번호 변경 sql문 -->
	<update id="userPasswordUpdate" parameterType="com.web.travel.dto.auth_passwordTO">
		UPDATE user SET hashed_password = #{hashedPassword} WHERE email = #{email};
	</update>
	
</mapper>